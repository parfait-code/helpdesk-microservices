# docker-compose.ticket.yml

services:
  ticket-service:
    build: 
      context: .
    container_name: ticket-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://ticket:ticketpass@ticket-db:5432/ticket_db
      - REDIS_URL=redis://:redispass@ticket-redis:6379
      - AUTH_SERVICE_URL=http://host.docker.internal:3001
      - USER_SERVICE_URL=http://host.docker.internal:3002
      - FILE_SERVICE_URL=http://host.docker.internal:3004
      - NOTIFICATION_SERVICE_URL=http://host.docker.internal:3005
      - ENABLE_FILE_SERVICE=false
      - MOCK_FILE_SERVICE=true
      - ENABLE_NOTIFICATIONS=false
      - MOCK_NOTIFICATIONS=true
      - ENABLE_KAFKA=false
      - KAFKA_BROKERS=kafka:9092
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - LOG_LEVEL=debug
      - RATE_LIMIT_MAX=100
      - REDIS_TICKET_TTL=1800
      - REDIS_TICKET_LIST_TTL=300
      - REDIS_USER_INFO_TTL=3600
    depends_on:
      ticket-db:
        condition: service_healthy
      ticket-redis:
        condition: service_healthy
    networks:
      - ticket-network
    volumes:
      - ticket-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3003/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    extra_hosts:
      - "host.docker.internal:host-gateway"

  ticket-db:
    image: postgres:15-alpine
    container_name: ticket-db
    environment:
      - POSTGRES_USER=ticket
      - POSTGRES_PASSWORD=ticketpass
      - POSTGRES_DB=ticket_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - ticket-db-data:/var/lib/postgresql/data
      - ./src/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5403:5432"
    networks:
      - ticket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticket -d ticket_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  ticket-redis:
    image: redis:7-alpine
    container_name: ticket-redis
    command: redis-server --appendonly yes --requirepass redispass
    volumes:
      - ticket-redis-data:/data
    ports:
      - "6303:6379"
    networks:
      - ticket-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redispass", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Service de monitoring (optionnel)
  ticket-adminer:
    image: adminer:4.8.1
    container_name: ticket-adminer
    ports:
      - "8083:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=ticket-db
      - ADMINER_DESIGN=bootstrap
    networks:
      - ticket-network
    depends_on:
      - ticket-db

volumes:
  ticket-db-data:
    driver: local
  ticket-redis-data:
    driver: local
  ticket-logs:
    driver: local

networks:
  ticket-network:
    driver: bridge
    name: ticket-network
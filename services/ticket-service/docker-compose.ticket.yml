# docker-compose.user.yml

services:
  user-service:
    build: 
      context: .  # ← CORRECTION : point au dossier courant
      # target: production  ← SUPPRIMÉ car pas de multi-stage dans Dockerfile
    container_name: user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://user:userpass@user-db:5432/user_db
      - REDIS_URL=redis://user-redis:6379
      - AUTH_SERVICE_URL=http://host.docker.internal:3001
      - FILE_SERVICE_URL=http://localhost:3004
      - ENABLE_FILE_SERVICE=false
      - MOCK_FILE_SERVICE=true
      - ENABLE_KAFKA=false
      - KAFKA_BROKERS=kafka:9092
      - CORS_ORIGINS=http://localhost:3000,http://localhost:8080
      - LOG_LEVEL=debug
      - UPLOAD_MAX_SIZE=5242880
      - RATE_LIMIT_MAX=100
      - REDIS_PROFILE_TTL=3600
      - REDIS_USER_LIST_TTL=300
    depends_on:
      user-db:
        condition: service_healthy
      user-redis:
        condition: service_healthy
    networks:
      - user-network
    volumes:
      - user-logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/api/v1/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    extra_hosts:
      - "host.docker.internal:host-gateway"  # ← Pour accéder à l'auth-service sur l'hôte

  user-db:
    image: postgres:15-alpine
    container_name: user-db
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=userpass
      - POSTGRES_DB=user_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - user-db-data:/var/lib/postgresql/data
      - ./src/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5402:5432"
    networks:
      - user-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  user-redis:
    image: redis:7-alpine
    container_name: user-redis
    command: redis-server --appendonly yes
    volumes:
      - user-redis-data:/data
    ports:
      - "6302:6379"
    networks:
      - user-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  # Service de monitoring (optionnel)
  user-adminer:
    image: adminer:4.8.1
    container_name: user-adminer
    ports:
      - "8082:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=user-db
      - ADMINER_DESIGN=bootstrap
    networks:
      - user-network
    depends_on:
      - user-db
    restart: unless-stopped
    profiles:
      - tools

networks:
  user-network:
    driver: bridge
    name: user-network

volumes:
  user-db-data:
    name: user-db-data
  user-redis-data:
    name: user-redis-data
  user-logs:
    name: user-logs
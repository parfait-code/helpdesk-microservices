# docker-compose.services.yml
# Configuration pour lancer auth-service, user-service et ticket-service ensemble
services:
  auth-db:
    image: postgres:15-alpine
    container_name: helpdesk-auth-db
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=auth_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    ports:
      - "5401:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - helpdesk-network

  # Base de données PostgreSQL pour user-service  
  user-db:
    image: postgres:15-alpine
    container_name: helpdesk-user-db
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=userpass
      - POSTGRES_DB=user_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - user-db-data:/var/lib/postgresql/data
    ports:
      - "5402:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - helpdesk-network

  # Base de données PostgreSQL pour ticket-service
  ticket-db:
    image: postgres:15-alpine
    container_name: helpdesk-ticket-db
    environment:
      - POSTGRES_USER=ticket
      - POSTGRES_PASSWORD=ticketpass
      - POSTGRES_DB=ticket_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - ticket-db-data:/var/lib/postgresql/data
      - ./services/ticket-service/src/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5403:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ticket -d ticket_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - helpdesk-network

  # Redis pour auth-service
  auth-redis:
    image: redis:7-alpine
    container_name: helpdesk-auth-redis
    command: redis-server --requirepass redispass
    ports:
      - "6301:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - helpdesk-network

  # Redis pour user-service
  user-redis:
    image: redis:7-alpine
    container_name: helpdesk-user-redis  
    command: redis-server --requirepass redispass
    ports:
      - "6302:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - helpdesk-network

  # Redis pour ticket-service
  ticket-redis:
    image: redis:7-alpine
    container_name: helpdesk-ticket-redis
    command: redis-server --requirepass redispass
    ports:
      - "6303:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - helpdesk-network

  # Base de données PostgreSQL pour file-service
  file-db:
    image: postgres:15-alpine
    container_name: helpdesk-file-db
    environment:
      - POSTGRES_USER=file
      - POSTGRES_PASSWORD=filepass
      - POSTGRES_DB=file_db
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - file-db-data:/var/lib/postgresql/data
    ports:
      - "5404:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U file -d file_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - helpdesk-network

  # Redis pour file-service
  file-redis:
    image: redis:7-alpine
    container_name: helpdesk-file-redis
    command: redis-server --requirepass redispass
    ports:
      - "6304:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - helpdesk-network

  # MinIO pour le stockage des fichiers
  minio:
    image: minio/minio:latest
    container_name: helpdesk-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
      - MINIO_DEFAULT_BUCKETS=helpdesk-files
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - helpdesk-network

  # Service d'authentification
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    container_name: helpdesk-auth-service
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://user:pass@auth-db:5432/auth_db
      - REDIS_URL=redis://:redispass@auth-redis:6379
      - JWT_SECRET=eeyJhbGciOiJIUzI1NiJ9eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTc1MzgxNzAwOCwiaWF0IjoxNzUzODE3MDA4fQ7FUll9vRaQmMwmFb6cBwciQN6J0VAZhG46UUtSwrY0
      - JWT_EXPIRES_IN=24h
      - REFRESH_TOKEN_EXPIRES_IN=7d
      - BCRYPT_ROUNDS=12
      - MAX_LOGIN_ATTEMPTS=5
      - LOCK_TIME=15
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3002
      - ENABLE_KAFKA=false
      - MOCK_EVENTS=true
    depends_on:
      auth-db:
        condition: service_healthy
      auth-redis:
        condition: service_healthy
    networks:
      - helpdesk-network
    restart: unless-stopped

  # Service utilisateur
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: helpdesk-user-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://user:userpass@user-db:5432/user_db
      - REDIS_URL=redis://:redispass@user-redis:6379
      - AUTH_SERVICE_URL=http://auth-service:3001
      - AUTH_SERVICE_TIMEOUT=5000
      - FILE_SERVICE_URL=http://localhost:3004
      - ENABLE_FILE_SERVICE=false
      - MOCK_FILE_SERVICE=true
      - ENABLE_KAFKA=false
      - KAFKA_BROKERS=localhost:9092
      - UPLOAD_MAX_SIZE=5242880
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
    depends_on:
      user-db:
        condition: service_healthy
      user-redis:
        condition: service_healthy
      auth-service:
        condition: service_started
    networks:
      - helpdesk-network
    restart: unless-stopped

  # Service de tickets
  ticket-service:
    build:
      context: ./services/ticket-service
      dockerfile: dockerfile
      target: production
    container_name: helpdesk-ticket-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DATABASE_URL=postgresql://ticket:ticketpass@ticket-db:5432/ticket_db
      - REDIS_URL=redis://:redispass@ticket-redis:6379
      - AUTH_SERVICE_URL=http://auth-service:3001
      - AUTH_SERVICE_TIMEOUT=5000
      - USER_SERVICE_URL=http://user-service:3002
      - USER_SERVICE_TIMEOUT=5000
      - FILE_SERVICE_URL=http://file-service:3004
      - FILE_SERVICE_TIMEOUT=5000
      - NOTIFICATION_SERVICE_URL=http://localhost:3005
      - ENABLE_FILE_SERVICE=true
      - MOCK_FILE_SERVICE=false
      - ENABLE_NOTIFICATIONS=false
      - MOCK_NOTIFICATIONS=true
      - ENABLE_KAFKA=false
      - KAFKA_BROKERS=localhost:9092
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=info
      - RATE_LIMIT_MAX=100
      - REDIS_TICKET_TTL=1800
      - REDIS_TICKET_LIST_TTL=300
      - REDIS_USER_INFO_TTL=3600
    depends_on:
      ticket-db:
        condition: service_healthy
      ticket-redis:
        condition: service_healthy
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
    networks:
      - helpdesk-network
    restart: unless-stopped

  # Service de gestion des fichiers
  file-service:
    build:
      context: ./services/file-service
      dockerfile: Dockerfile
    container_name: helpdesk-file-service
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DATABASE_URL=postgresql://file:filepass@file-db:5432/file_db
      - REDIS_URL=redis://:redispass@file-redis:6379
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_USE_SSL=false
      - MINIO_BUCKET_NAME=helpdesk-files
      - AUTH_SERVICE_URL=http://auth-service:3001
      - AUTH_SERVICE_TIMEOUT=5000
      - TICKET_SERVICE_URL=http://ticket-service:3003
      - TICKET_SERVICE_TIMEOUT=5000
      - CORS_ORIGIN=http://localhost:3000,http://localhost:3001,http://localhost:3002,http://localhost:3003
      - JWT_SECRET=eeyJhbGciOiJIUzI1NiJ9eyJSb2xlIjoiQWRtaW4iLCJJc3N1ZXIiOiJJc3N1ZXIiLCJVc2VybmFtZSI6IkphdmFJblVzZSIsImV4cCI6MTc1MzgxNzAwOCwiaWF0IjoxNzUzODE3MDA4fQ7FUll9vRaQmMwmFb6cBwciQN6J0VAZhG46UUtSwrY0
      - MAX_FILE_SIZE=10485760
      - MAX_FILES_PER_TICKET=10
      - ALLOWED_MIME_TYPES=image/jpeg,image/png,image/gif,image/webp,application/pdf,text/plain,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - LOG_LEVEL=info
    volumes:
      - ./services/file-service/logs:/app/logs
    depends_on:
      file-db:
        condition: service_healthy
      file-redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      auth-service:
        condition: service_started
      ticket-service:
        condition: service_started
    networks:
      - helpdesk-network
    restart: unless-stopped

  # Nginx Reverse Proxy - Point d'entrée unique pour tous les services
  nginx-gateway:
    image: nginx:alpine
    container_name: helpdesk-nginx-gateway
    ports:
      - "8080:80"  # Port d'entrée unique pour le frontend
    volumes:
      - ./nginx/nginx-simple.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
      # Désactiver la configuration par défaut qui interfère
      - /dev/null:/etc/nginx/conf.d/default.conf
    depends_on:
      auth-service:
        condition: service_started
      user-service:
        condition: service_started
      ticket-service:
        condition: service_started
      file-service:
        condition: service_started
    networks:
      - helpdesk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  auth-db-data:
    driver: local
  user-db-data:
    driver: local
  ticket-db-data:
    driver: local
  file-db-data:
    driver: local
  minio-data:
    driver: local

networks:
  helpdesk-network:
    driver: bridge
    name: helpdesk-network

# Configuration Nginx simplifiée pour le reverse proxy
events {
    worker_connections 1024;
}

http {
    upstream auth_service {
        server auth-service:3001;
    }
    
    upstream user_service {
        server user-service:3002;
    }
    
    upstream ticket_service {
        server ticket-service:3003;
    }
    
    upstream file_service {
        server file-service:3004;
    }
    
    server {
        listen 80;
        
        # Headers CORS
        # add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        # add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        # add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;

        # Headers CORS pour le frontend
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Répondre aux requêtes OPTIONS (preflight CORS)
        # location ~ ^/(api|auth|users|tickets|files)/ {
        #     if ($request_method = 'OPTIONS') {
        #         add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        #         add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        #         add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        #         add_header 'Access-Control-Allow-Credentials' 'true' always;
        #         add_header 'Access-Control-Max-Age' 1728000;
        #         add_header 'Content-Type' 'text/plain charset=UTF-8';
        #         add_header 'Content-Length' 0;
        #         return 204;
        #     }
        # }
        
        # Health check du gateway
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # API Gateway info
        location = / {
            return 200 '{"message":"Helpdesk API Gateway","version":"1.0.0","services":{"auth":"/api/auth/","users":"/api/users/","tickets":"/api/tickets/","files":"/api/files/"},"health":"/health"}';
            add_header Content-Type application/json;
        }
        
        # Auth service (endpoint direct /health)
        location /api/auth/ {
            proxy_pass http://auth_service/api/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # User service (utilise /api/v1/)
        location /api/users/ {
            proxy_pass http://user_service/api/v1/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Ticket service (utilise /api/v1/)
        location /api/tickets/ {
            proxy_pass http://ticket_service/api/v1/tickets/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # File service (utilise /api/v1/)
        location /api/files/ {
            proxy_pass http://file_service/api/v1/files/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # Default 404 pour autres routes
        location / {
            return 404 '{"error": "Endpoint not found", "status": 404}';
            add_header Content-Type application/json;
        }
    }
}

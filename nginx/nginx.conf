# Configuration Nginx pour servir de reverse proxy
# Point d'entrée unique pour tous les microservices

events {
    worker_connections 1024;
}

http {
    # Configuration générale
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # Logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;
    
    # Configuration proxy
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Timeout configuration
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    
    # Upstream definitions pour load balancing (au cas où vous auriez plusieurs instances)
    upstream auth_service {
        server auth-service:3001;
    }
    
    upstream user_service {
        server user-service:3002;
    }
    
    upstream ticket_service {
        server ticket-service:3003;
    }
    
    upstream file_service {
        server file-service:3004;
    }
    
    # Configuration du serveur principal
    server {
        listen 80;
        server_name localhost;
        
        # Headers CORS pour le frontend
        add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Répondre aux requêtes OPTIONS (preflight CORS)
        location ~ ^/(api|auth|users|tickets|files)/ {
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, PATCH, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, Origin, X-Requested-With' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
        
        # Route vers le service d'authentification
        location /api/auth/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://auth_service/;
            proxy_redirect off;
        }
        
        # Route vers le service utilisateur
        location /api/users/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://user_service/;
            proxy_redirect off;
        }
        
        # Route vers le service de tickets
        location /api/tickets/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://ticket_service/;
            proxy_redirect off;
        }
        
        # Route vers le service de fichiers
        location /api/files/ {
            limit_req zone=api_limit burst=20 nodelay;
            proxy_pass http://file_service/;
            proxy_redirect off;
            
            # Configuration spéciale pour l'upload de fichiers
            client_max_body_size 50M;
        }
        
        # Health check endpoint pour le reverse proxy
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Route pour servir des fichiers statiques si nécessaire
        location /static/ {
            alias /var/www/static/;
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Page d'accueil avec informations sur l'API
        location = / {
            return 200 '{
                "message": "Helpdesk API Gateway", 
                "version": "1.0.0",
                "services": {
                    "auth": "/api/auth/",
                    "users": "/api/users/", 
                    "tickets": "/api/tickets/",
                    "files": "/api/files/"
                },
                "health": "/health"
            }';
            add_header Content-Type application/json;
        }
        
        # Gestion des erreurs
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            return 404 '{"error": "Endpoint not found", "status": 404}';
            add_header Content-Type application/json;
        }
        
        location = /50x.html {
            return 500 '{"error": "Internal server error", "status": 500}';
            add_header Content-Type application/json;
        }
    }
}
